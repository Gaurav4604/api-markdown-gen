[
  {
    "header": "API Documentation",
    "data": "\nThe API endpoint /v1/flood accepts a geographical coordinate and returns river discharge\ndata from the largest river in a 5 km area for the given coordinates. All URL parameters are listed\nbelow:\n\n| Parameter | Format | Required | Default | Description |\n| --- | --- | --- | --- | --- |\n| latitude, longitude | Floating point | Yes |  | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g. &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location\\_id. |\n| daily | String array | No |  | A list of weather variables which should be returned. Values can be comma separated, or multiple &daily= parameter in the URL can be used. |\n| timeformat | String | No | iso8601 | If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all time is then in GMT+0! |\n| past\\_days | Integer | No | 0 | If past\\_days is set, past data can be returned. |\n| forecast\\_days | Integer (0-210) | No | 92 | Per default, only 92 days are returned. Up to 210 days of forecast are possible. |\n| start\\_dateend\\_date | String (yyyy-mm-dd) | No |  | The time interval to get data. A day must be specified as an ISO8601 date (e.g. 2022-06-30). Data are available from 1984-01-01 until 7 month forecast. |\n| ensemble | Boolean | No |  | If True all forecast ensemble members will be returned |\n| cell\\_selection | String | No | nearest | Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with [similar elevation to the requested coordinates using a 90-meter digital elevation model](https://openmeteo.substack.com/p/improving-weather-forecasts-with \"Elevation based grid-cell selection explained\"). sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell. |\n| apikey | String | No |  | Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See [pricing](/en/pricing \"Pricing information to use the weather API commercially\") for more information. |\n\nAdditional optional URL parameters will be added. For API stability, no required parameters will\nbe added in the future!\n\n### Daily Parameter Definition"
  },
  {
    "header": "Daily Parameter Definition",
    "data": "\nThe parameter &daily= accepts the following values:\n\n| Variable | Unit | Description |\n| --- | --- | --- |\n| river\\_discharge | m\u00b3/s | Daily river discharge rate in m\u00b3/s |\n| river\\_discharge\\_meanriver\\_discharge\\_medianriver\\_discharge\\_maxriver\\_discharge\\_minriver\\_discharge\\_p25river\\_discharge\\_p75 | m\u00b3/s | Statistical analysis from ensemble members for river discharge rate in m\u00b3/s. Only available for forecasts and not for consolidated historical data. |\n\n### JSON Return Object"
  },
  {
    "header": "JSON Return Object",
    "data": "\nOn success a JSON object will be returned.\n\n```\n\n  \"latitude\": 52.52,\n  \"longitude\": 13.419,\n  \"generationtime_ms\": 2.2119,\n  \"timezone\": \"Europe/Berlin\",\n  \"timezone_abbreviation\": \"CEST\",\n  \"hourly\": {\n    \"time\": [\"2022-07-01T00:00\", \"2022-07-01T01:00\", \"2022-07-01T02:00\", ...],\n    \"temperature_2m\": [13, 12.7, 12.7, 12.5, 12.5, 12.8, 13, 12.9, 13.3, ...]\n  },\n  \"hourly_units\": {\n    \"temperature_2m\": \"\u00b0C\"\n  },\n\n```\n\n| Parameter | Format | Description |\n| --- | --- | --- |\n| latitude, longitude | Floating point | WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate. |\n| generationtime\\_ms | Floating point | Generation time of the weather forecast in milliseconds. This is mainly used for performance monitoring and improvements. |\n| daily | Object | For each selected weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps. |\n| daily\\_units | Object | For each selected weather variable, the unit will be listed here. |\n\n### Errors"
  },
  {
    "header": "Errors",
    "data": "\nIn case an error occurs, for example a URL parameter is not correctly specified, a JSON error\nobject is returned with a HTTP 400 status code.\n\n```\n\n  \"error\": true,\n  \"reason\": \"Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly\"\n\n```\n\nOpen-Meteo\n\n* [Features](/en/features)\n* [Pricing](/en/pricing)\n* [About us & Contact](/en/about)\n* [License](/en/license)\n* [Terms & Privacy](/en/terms)\n\nWeather APIs\n\n* [Weather Forecast API](/en/docs)\n* [Historical Weather API](/en/docs/historical-weather-api)\n* [ECMWF API](/en/docs/ecmwf-api)\n* [GFS & HRRR Forecast API](/en/docs/gfs-api)\n* [M\u00e9t\u00e9o-France API](/en/docs/meteofrance-api)\n* [DWD ICON API](/en/docs/dwd-api)\n* [GEM API](/en/docs/gem-api)\n* [JMA API](/en/docs/jma-api)\n* [Met Norway API](/en/docs/metno-api)\n\nOther APIs\n\n* [Ensemble API](/en/docs/ensemble-api)\n* [Climate Change API](/en/docs/climate-api)\n* [Marine Weather API](/en/docs/marine-weather-api)\n* [Air Quality API](/en/docs/air-quality-api)\n* [Geocoding API](/en/docs/geocoding-api)\n* [Elevation API](/en/docs/elevation-api)\n* [Flood API](/en/docs/flood-api)\n\nExternal\n\n* [GitHub](https://github.com/open-meteo/open-meteo)\n* [Blog](https://openmeteo.substack.com/archive?sort=new)\n* [Twitter](https://twitter.com/open_meteo)\n* [Mastodon](https://fosstodon.org/%40openmeteo)\n* [Service status and uptime](https://status.open-meteo.com)\n* [Model Updates Overview](/en/docs/model-updates)\n \u00a9 2022-2025 Copyright: Open-Meteo.com\n"
  },
  {
    "api-endpoint": "https://flood-api.open-meteo.com/v1/flood"
  }
]